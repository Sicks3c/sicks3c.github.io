<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security Writeups</title><link>https://sicks3c.github.io/</link><description>Recent content on Security Writeups</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Feb 2025 07:32:53 +0800</lastBuildDate><atom:link href="https://sicks3c.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Abusing Url Shortners for Fun and Profit</title><link>https://sicks3c.github.io/research/abusing-url-shortners-for-fun-and-profit/</link><pubDate>Wed, 26 Feb 2025 07:32:53 +0800</pubDate><guid>https://sicks3c.github.io/research/abusing-url-shortners-for-fun-and-profit/</guid><description>Hello Security Researchers
Have you ever encountered a bug where it‚Äôs hard to show impact due to the lack of enumeration of a certain value of a parameter ? Well if yes, In this writeup I will talk about how you can find and abuse URL shortners to ATO or Information disclosure
Many companies use URL shortners to send private invite and passwordless logins and things along those lines and it‚Äôs really difficult to guess or to brute these but there‚Äôs always a way to do things by thinking outside the box üì¶</description><content>&lt;p>&lt;strong>Hello Security Researchers&lt;/strong>&lt;/p>
&lt;p>Have you ever encountered a bug where it‚Äôs hard to show impact due to the lack of enumeration of a certain value of a parameter ?
Well if yes, In this writeup I will talk about how you can find and abuse URL shortners to ATO or Information disclosure&lt;/p>
&lt;p>Many companies use URL shortners to send private invite and passwordless logins and things along those lines and it‚Äôs really difficult to guess or to brute these but there‚Äôs always a way to do things by thinking outside the box üì¶&lt;/p>
&lt;h3 id="lets-talk-about-url-shortners-and-their-types">Let‚Äôs talk about URL shortners and their types:&lt;/h3>
&lt;p>URL shortners are mostly linked to 3rd party services like &lt;a href="https://bitly.com">https://bitly.com&lt;/a> &lt;a href="https://cutt.ly/">https://cutt.ly/&lt;/a> and others are made by company and they have custom built
Like : &lt;a href="https://indd.jobs">https://indd.jobs&lt;/a> | &lt;a href="https://inst.cr">https://inst.cr&lt;/a>&lt;/p>
&lt;h3 id="how-can-we-approach-this">How can we approach this:&lt;/h3>
&lt;p>We can use multiple scenarios first we can test functionalities that triggers email and view the source of them if they contain a URL shortner check twitter account of company and extract all the links they share&lt;/p>
&lt;h3 id="how-url-shortners-work">How URL Shortners Work:&lt;/h3>
&lt;p>Most of the case we should look for something that has this kind of behavior
&lt;code>URLshortner.com/{HASH}&lt;/code> -&amp;gt; &lt;code>Website.com/?token={YOU-CANT-GUESS-THIS}&lt;/code>
and based on that we can enumerate more and see more&lt;/p>
&lt;h3 id="complexity-level">Complexity Level:&lt;/h3>
&lt;p>The complexity is based on the &lt;code>HASH&lt;/code> used after the URL so it‚Äôs either integer strings and or both &lt;code>Uppercase / Lowercase&lt;/code> length of the hash that starts from 5 characters plus
Examples:&lt;/p>
&lt;p>&lt;a href="https://url.com/12345">https://url.com/12345&lt;/a> | &lt;a href="https://url.com/A2B4C">https://url.com/A2B4C&lt;/a> | &lt;a href="https://url.com/A2B4CGFDFF33434">https://url.com/A2B4CGFDFF33434&lt;/a>&lt;/p>
&lt;p>So if we are facing only integers it‚Äôs the easiest case here we can of course generate all the possible and it‚Äôs kinda difficult for other case OR IS IT ? üòà&lt;/p>
&lt;h3 id="exploitation">Exploitation:&lt;/h3>
&lt;p>For our write up we will focus on &lt;code>inst.cr&lt;/code> since it has a custom built and it‚Äôs so difficult to guess &lt;a href="http://inst.cr/t/UEJBUThINjYx">http://inst.cr/t/UEJBUThINjYx&lt;/a>
So how can we guess the &lt;code>hash&lt;/code> ?&lt;/p>
&lt;p>We don‚Äôt, we don‚Äôt need to we can basically throw the domain into &lt;code>waybackurls&lt;/code> or &lt;code>gau&lt;/code> and see the results&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:350/format:webp/1*ftwj3Zsk04oeCYyhpiHaRA.png" alt="image">&lt;/p>
&lt;p>Now we need to see where the links are redirecting and see if something useful is the paths that we can make a use of
we simply do this&lt;/p>
&lt;p>&lt;code>gau inst.cr | httpx -location -mc 301,302 | grep -Eo ‚Äò\[(.*?)\]&lt;/code>&lt;/p>
&lt;p>In order to &lt;code>grep&lt;/code> the value of all the rediction and spit it out in your terminal&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:550/format:webp/1*wWGo3BhNsyuHUnAcFNb0Qg.png" alt="image2">&lt;/p>
&lt;p>Now based on the application logic, you can search for keywords that are interesting like &lt;code>token&lt;/code> &lt;code>id&lt;/code> &lt;code>uuid&lt;/code> nd things along those lines
after that you will have a very good argument to convince the team that you were able to get the value of a certain parameter that they made difficult to guess&lt;/p>
&lt;h3 id="results">Results?&lt;/h3>
&lt;p>Blind ATO twice in a private program due to valide token on URLshortner
&lt;code>site.com/?basket=token&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1160/format:webp/1*F6qL02Q0fJNiwcbIw4NOfg.png" alt="image3">&lt;/p>
&lt;p>Multiple IDORS went from Invalid to valid&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*-8KmXrZc6p0bTo6z3svwoA.png" alt="indeed">&lt;/p>
&lt;p>I hope you enjoyed reading this and I will catch you in the next one&lt;/p>
&lt;p>Stay curious ‚ù§&lt;/p></content></item><item><title>How I Scored 2K Bounty via an Easy IDOR</title><link>https://sicks3c.github.io/posts/how-i-scored-2k-bounty-via-an-easy-idor/</link><pubDate>Wed, 26 Feb 2025 07:32:53 +0800</pubDate><guid>https://sicks3c.github.io/posts/how-i-scored-2k-bounty-via-an-easy-idor/</guid><description>Hello Security Researchers
In this writeup I will talk how I was able to find an IDOR in one of the largest Russian Company nothing other than Mail.ru So approaching targets with huge scope can be frustrating sometimes since you don‚Äôt know where to start, For me I started looking in the main scope of Mail.ru Games
I fired up Burp Created an account Adding things in my cart Viewing the blog Creating a support ticket Before testing anything the ticket link looked kind of suspicious since it had /ticket/INTEGER</description><content>&lt;p>&lt;strong>Hello Security Researchers&lt;/strong>&lt;/p>
&lt;p>In this writeup I will talk how I was able to find an IDOR in one of the largest Russian Company nothing other than Mail.ru
So approaching targets with huge scope can be frustrating sometimes since you don‚Äôt know where to start, For me I started looking in the main scope of &lt;code>Mail.ru Games&lt;/code>&lt;/p>
&lt;ol>
&lt;li>I fired up Burp&lt;/li>
&lt;li>Created an account&lt;/li>
&lt;li>Adding things in my cart&lt;/li>
&lt;li>Viewing the &lt;code>blog&lt;/code>&lt;/li>
&lt;li>Creating a support ticket&lt;/li>
&lt;/ol>
&lt;p>Before testing anything the ticket link looked kind of suspicious since it had &lt;code>/ticket/INTEGER&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ErP1l5Al5QOK8_O5qfdP5w.png" alt="ticket">&lt;/p>
&lt;p>Let‚Äôs breakdown what can go wrong here
We have few parameters &lt;code>project_id/user_id/sign&lt;/code> and the ticket number
First thing I did is to remove the sign which is the signature and see if I can access it from an unauthenticated browser&lt;/p>
&lt;p>This looks easy no way that works right ?!!&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:400/format:webp/0*jE5ml_v7U8wAzl9H" alt="img2">&lt;/p>
&lt;p>Well you‚Äôre wrong it worked and I was able to see my ticket and the conversation with the agent and also any attached file, I could also speak in the conversation as anonymous user üòÅ&lt;/p>
&lt;p>Further testing showed that changing the ticket number can allow viewing others ticket and changing the &lt;code>user_id&lt;/code> can allow viewing other ticket of that matched ID&lt;/p>
&lt;p>went and wrapped up a good report with &lt;a href="https://x.com/wld_basha">my friend&lt;/a> , and it was triaged within minutes an paid after few days&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:590/format:webp/1*WXV_nYEgIwyAQ0HnWSpizA.png" alt="bounty">&lt;/p>
&lt;h3 id="takeaways">Takeaways&lt;/h3>
&lt;ul>
&lt;li>Don‚Äôt be afraid of diving the Main app it‚Äôs where all the juicy things exist&lt;/li>
&lt;li>Never underestimate yourself from finding bugs everyone has a unique view for the target&lt;/li>
&lt;li>Don‚Äôt be discouraged if you didn‚Äôt find a bug today tomorrow you will&lt;/li>
&lt;/ul>
&lt;p>I hope you enjoyed reading this and I will catch you in the next one&lt;/p>
&lt;p>Stay curious ‚ù§&lt;/p></content></item><item><title>ATO via Facebook OAuth Due Unsanitized Schema Allows to Steal OAuth Token</title><link>https://sicks3c.github.io/posts/ato-via-facebook-oauth-due-unsanitized-schema-allows-to-steal-oauth-token/</link><pubDate>Fri, 01 Sep 2023 07:32:53 +0800</pubDate><guid>https://sicks3c.github.io/posts/ato-via-facebook-oauth-due-unsanitized-schema-allows-to-steal-oauth-token/</guid><description>Deep Dive into an OAuth Exploit: A 0-Day Case Study Hello Everyone,
In our continuous hunt for novel attack vectors and security challenges, mainteemoforfun and I embarked on an in-depth exploration of mobile authentication mechanisms. Our efforts culminated in the discovery of a striking 0-day vulnerability back in 2023 that has since been patched.
This vulnerability enabled us to potentially hijack user sessions on websites utilizing Facebook‚Äôs ‚ÄúLogin With Facebook‚Äù feature.</description><content>&lt;h1 id="deep-dive-into-an-oauth-exploit-a-0-day-case-study">Deep Dive into an OAuth Exploit: A 0-Day Case Study&lt;/h1>
&lt;p>&lt;strong>Hello Everyone,&lt;/strong>&lt;/p>
&lt;p>In our continuous hunt for novel attack vectors and security challenges, &lt;a href="https://x.com/wld_basha">&lt;strong>mainteemoforfun&lt;/strong>&lt;/a> and I embarked on an in-depth exploration of &lt;strong>mobile authentication mechanisms&lt;/strong>. Our efforts culminated in the discovery of a striking &lt;strong>0-day vulnerability&lt;/strong> back in &lt;strong>2023&lt;/strong> that has since been patched.&lt;/p>
&lt;p>This vulnerability enabled us to potentially hijack user sessions on websites utilizing &lt;strong>Facebook‚Äôs ‚ÄúLogin With Facebook‚Äù&lt;/strong> feature. By manipulating the &lt;strong>&lt;code>redirect_uri&lt;/code>&lt;/strong> parameter in the &lt;strong>OAuth&lt;/strong> flow, an attacker could redirect authentication tokens to a host under their control.&lt;/p>
&lt;p>Below, I provide an expert breakdown of the exploit, our proof-of-concept, and the impact it generated.&lt;/p>
&lt;hr>
&lt;h2 id="understanding-the-vulnerability">Understanding the Vulnerability&lt;/h2>
&lt;h3 id="oauth-basics-and-the-attack-surface">OAuth Basics and the Attack Surface&lt;/h3>
&lt;p>&lt;strong>OAuth&lt;/strong> is the de facto standard for delegated authorization. Typically, during an OAuth transaction, the client application registers a trusted &lt;strong>&lt;code>redirect_uri&lt;/code>&lt;/strong> (often in a custom scheme format, such as &lt;code>fb://clientID&lt;/code>). This URI is used by the authorization server (&lt;strong>Facebook&lt;/strong>, in this case) to send back the authentication token after a user successfully logs in.&lt;/p>
&lt;p>When testing OAuth implementations, it is common to experiment with modifying the &lt;strong>&lt;code>redirect_uri&lt;/code>&lt;/strong> parameter to see if the endpoint strictly enforces whitelist validations. In our research, we hypothesized that if we could subtly alter this parameter without triggering a verification error, the token might be redirected to an unintended destination.&lt;/p>
&lt;h3 id="the-exploit-mechanism">The Exploit Mechanism&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initial Experimentation:&lt;/strong>&lt;br>
We began by modifying the &lt;strong>&lt;code>redirect_uri&lt;/code>&lt;/strong> in the OAuth flow. Our initial test‚Äîattempting to change the &lt;strong>clientID&lt;/strong> directly (e.g., &lt;code>fb://anotherClientID&lt;/code>) produced a ‚Äúmismatch‚Äù error, as expected.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Refined Modification:&lt;/strong>&lt;br>
By appending an extra character to the &lt;strong>clientID&lt;/strong> (e.g., &lt;code>fb://clientIDa&lt;/code>), we observed that the authentication token was redirected to the newly specified scheme. This minor change bypassed the strict check, allowing the token to be delivered to an endpoint not originally whitelisted by the service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Verification:&lt;/strong>&lt;br>
To rule out any anomalies, we repeated the process several times. The results were consistent, confirming that this behavior was not a fluke but a genuine vulnerability.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="proof-of-concept">Proof-of-Concept&lt;/h2>
&lt;p>To demonstrate the impact of this vulnerability, I developed a small &lt;strong>Android&lt;/strong> application with a custom intent filter designed to capture the redirected token. Here‚Äôs an excerpt from the app‚Äôs manifest:&lt;/p>
&lt;pre>&lt;code>&amp;lt;intent-filter&amp;gt;
&amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;
&amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
&amp;lt;action android:name=&amp;quot;android.intent.action.VIEW&amp;quot; /&amp;gt;
&amp;lt;category android:name=&amp;quot;android.intent.category.DEFAULT&amp;quot; /&amp;gt;
&amp;lt;category android:name=&amp;quot;android.intent.category.BROWSABLE&amp;quot; /&amp;gt;
&amp;lt;data android:scheme=&amp;quot;fbClientIDa&amp;quot; /&amp;gt;
&amp;lt;/intent-filter&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>When the OAuth flow was initiated, the token was unexpectedly sent to this malicious app instead of the legitimate one. This confirmed that the modified &lt;strong>&lt;code>redirect_uri&lt;/code>&lt;/strong> could indeed be exploited to intercept sensitive &lt;strong>authentication tokens&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5HcVciv.png" alt="Proof of Concept">&lt;/p>
&lt;hr>
&lt;h2 id="reporting-and-bounty-results">Reporting and Bounty Results&lt;/h2>
&lt;p>We responsibly disclosed this vulnerability to the &lt;strong>Facebook Bug Bounty Program&lt;/strong> and also submitted reports via &lt;strong>HackerOne&lt;/strong> and &lt;strong>Bugcrowd&lt;/strong>. Here‚Äôs a summary of our findings:&lt;/p>
&lt;h3 id="hackerone">HackerOne&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Total Reports:&lt;/strong> 20
&lt;ul>
&lt;li>&lt;strong>Severity Breakdown:&lt;/strong> 5 reports categorized between &lt;strong>medium&lt;/strong> and &lt;strong>high&lt;/strong> severity, which resulted in bounties totaling approximately &lt;strong>15K USD&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Additional Insights:&lt;/strong> Some targets, although not immediately vulnerable, were noted for having partial &lt;strong>backend verifications&lt;/strong>, hinting at broader issues.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="bugcrowd">Bugcrowd&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Total Reports:&lt;/strong> 10
&lt;ul>
&lt;li>&lt;strong>Outcome:&lt;/strong> The majority of these were marked as requiring highly unlikely conditions in a real-world scenario, rendering them inapplicable for payouts.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Visual summaries of our bounty earnings are available below:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/kV8G3NY.png" alt="Bounties">&lt;br>
&lt;img src="https://i.imgur.com/FVozCeK.png" alt="Bounties2">&lt;/p>
&lt;hr>
&lt;h2 id="facebooks-response">Facebook‚Äôs Response&lt;/h2>
&lt;p>The &lt;strong>Facebook&lt;/strong> security team promptly acknowledged our disclosure. They confirmed that the issue was known, addressed, and has since been fixed. Our verification tests post-patch indicate that the fix is effective, reinforcing the importance of vigilant &lt;strong>OAuth validation&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 id="key-takeaways">Key Takeaways&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Innovation in Testing:&lt;/strong>&lt;br>
&lt;strong>OAuth&lt;/strong> implementations may harbor subtle vulnerabilities. Experimenting with unconventional modifications‚Äîlike tweaking the &lt;strong>&lt;code>redirect_uri&lt;/code>&lt;/strong> it can sometimes reveal significant security flaws.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Real-World Implications:&lt;/strong>&lt;br>
Even minor oversights in &lt;strong>OAuth validation&lt;/strong> can have severe repercussions, including the potential for &lt;strong>account hijacking&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Continuous Vigilance:&lt;/strong>&lt;br>
The Evolving landscape of &lt;strong>authentication mechanisms&lt;/strong> demands constant scrutiny. As attackers and defenders, embracing creativity in testing is essential to uncovering and mitigating emerging threats.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Stay curious üñ§&lt;/p>
&lt;hr>
&lt;p>By sharing this in-depth analysis, I hope to encourage fellow security professionals to explore every nuance of &lt;strong>authentication protocols&lt;/strong>. Remember, in the world of cybersecurity, even ‚Äústupid‚Äù ideas can lead to groundbreaking discoveries.&lt;/p>
&lt;p>&lt;strong>Happy Hunting!&lt;/strong>&lt;/p>
&lt;div id="mc_embed_shell">
&lt;link href="//cdn-images.mailchimp.com/embedcode/classic-061523.css" rel="stylesheet" type="text/css">
&lt;style type="text/css">
#mc_embed_signup {
background: #1e1e1e;
color: #f8f8f2;
clear: left;
font: 14px "Courier New", monospace;
width: 600px;
padding: 20px;
border-radius: 5px;
}
#mc_embed_signup h2 {
color: #50fa7b;
margin-bottom: 10px;
}
#mc_embed_signup label {
color: #f8f8f2;
}
#mc_embed_signup input[type="email"] {
background: #282a36;
color: #f8f8f2;
border: 1px solid #44475a;
padding: 5px;
width: 100%;
box-sizing: border-box;
margin-top: 5px;
margin-bottom: 15px;
}
#mc_embed_signup input[type="submit"] {
background: #50fa7b;
border: none;
color: #282a36;
padding: 8px 12px;
cursor: pointer;
font-weight: bold;
}
#mc_embed_signup a {
color: #8be9fd;
text-decoration: none;
}
#mce-error-response, #mce-success-response {
background: #44475a;
color: #f8f8f2;
padding: 10px;
margin-top: 10px;
border-radius: 3px;
}
&lt;/style>
&lt;div id="mc_embed_signup">
&lt;form action="https://github.us15.list-manage.com/subscribe/post?u=70eef44d48f8b14be6128d61d&amp;amp;id=ae087575d8&amp;amp;f_id=00cba4e0f0" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank">
&lt;div id="mc_embed_signup_scroll">
&lt;h2>Subscribe&lt;/h2>
&lt;div class="indicates-required">&lt;span class="asterisk">*&lt;/span> indicates required&lt;/div>
&lt;div class="mc-field-group">
&lt;label for="mce-EMAIL">Email Address &lt;span class="asterisk">*&lt;/span>&lt;/label>
&lt;input type="email" name="EMAIL" class="required email" id="mce-EMAIL" required value="">
&lt;/div>
&lt;div id="mce-responses" class="clear foot">
&lt;div class="response" id="mce-error-response" style="display: none;">&lt;/div>
&lt;div class="response" id="mce-success-response" style="display: none;">&lt;/div>
&lt;/div>
&lt;div aria-hidden="true" style="position: absolute; left: -5000px;">
&lt;input type="text" name="b_70eef44d48f8b14be6128d61d_ae087575d8" tabindex="-1" value="">
&lt;/div>
&lt;div class="optionalParent">
&lt;div class="clear foot">
&lt;input type="submit" name="subscribe" id="mc-embedded-subscribe" class="button" value="Subscribe">
&lt;p style="margin: 0px auto;">
&lt;a href="http://eepurl.com/i-QE8Q" title="Mailchimp - email marketing made easy and fun">
&lt;span style="display: inline-block; background-color: transparent; border-radius: 4px;">
&lt;img class="refferal_badge" src="https://digitalasset.intuit.com/render/content/dam/intuit/mc-fe/en_us/images/intuit-mc-rewards-text-dark.svg" alt="Intuit Mailchimp" style="width: 220px; height: 40px; display: flex; padding: 2px 0px; justify-content: center; align-items: center;">
&lt;/span>
&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/form>
&lt;/div>
&lt;script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js">&lt;/script>
&lt;script type="text/javascript">
(function($) {
window.fnames = new Array();
window.ftypes = new Array();
fnames[0] = 'EMAIL';
ftypes[0] = 'email';
fnames[1] = 'FNAME';
ftypes[1] = 'text';
fnames[2] = 'LNAME';
ftypes[2] = 'text';
fnames[3] = 'ADDRESS';
ftypes[3] = 'address';
fnames[4] = 'PHONE';
ftypes[4] = 'phone';
fnames[5] = 'BIRTHDAY';
ftypes[5] = 'birthday';
fnames[6] = 'COMPANY';
ftypes[6] = 'text';
}(jQuery));
var $mcj = jQuery.noConflict(true);
&lt;/script>
&lt;/div></content></item><item><title>How I RCE'd the Largest RU Company</title><link>https://sicks3c.github.io/posts/how-i-rced-the-largest-ru-company/</link><pubDate>Thu, 19 Aug 2021 07:32:53 +0800</pubDate><guid>https://sicks3c.github.io/posts/how-i-rced-the-largest-ru-company/</guid><description>Hello Security Researchers
In this writeup I will explain how I was able to find RCE in Mail.ru which is considered the world largest internet company, Before starting to hack I was wondering on how I should approach the target and what most people would miss in the program, they have a huge scope which means it should be something out there sitting for me to find
I started looking with the Favicon using this script Where I replace the link with the Mail.</description><content>&lt;p>&lt;strong>Hello Security Researchers&lt;/strong>&lt;/p>
&lt;p>In this writeup I will explain how I was able to find RCE in &lt;code>Mail.ru&lt;/code> which is considered the world largest internet company,
Before starting to hack I was wondering on how I should approach the target and what most people would miss in the program, they have a huge scope which means it should be something out there sitting for me to find&lt;/p>
&lt;p>I started looking with the Favicon using this &lt;a href="https://gist.github.com/yehgdotnet/b9dfc618108d2f05845c4d8e28c5fc6a">script&lt;/a>
Where I replace the link with the Mail.ru favicon, once generate I go to shodan.io and search for it&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*QaglJY1N4ZmUe7x65Wru3w.png" alt="img1">&lt;/p>
&lt;p>Now we search this hash on shodan.io with the &lt;code>http.favicon.hash&lt;/code> syntax&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*pmEgkNtfn3FhxTLg4U8Uiw.png" alt="img2">&lt;/p>
&lt;p>Now I went to see page by page and look for something suspicious with an unusual port number so I kept going till I found a host with port 8080
That has a Welcome to Nginx page&lt;/p>
&lt;p>Once found I wanted to dig further on what‚Äôs going on, so I started to FUZZ directories and I found &lt;code>/static/shards/html&lt;/code> Publicly accessible and it looked Juicy&lt;/p>
&lt;p>From here I guessed that most of these hosts are Internal host and it will be difficult to reach them and I decided to &lt;a href="https://nmap.org/">Nmap&lt;/a> all of them
Found one that has a JDWP stands for (Java Debug Wire Protocol)&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1SOscii9_Beb5q4xEn-8-A.png" alt="nmap">&lt;/p>
&lt;p>So I started my research about this service / port and it turns out that it may be vulnerable to RCE by reading this &lt;a href="https://ioactive.com/hacking-java-debug-wire-protocol-or-how/">article&lt;/a>&lt;/p>
&lt;p>With the help of this &lt;a href="https://github.com/IOActive/jdwp-shellifier">jdwp-shellifier&lt;/a> I was able to show the RCE and the team triaged and paid &lt;code>$$$&lt;/code> since the server belongs to their infrastructure not the main assets&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SRItvaGIGW_67n-mvXNBcA.png" alt="bounty">&lt;/p>
&lt;p>Hope you enjoyed reading this and catch you in the next adventure&lt;/p>
&lt;p>Stay curious ‚ù§&lt;/p></content></item><item><title>How I Scored 1K Bounty Using Waybackurls</title><link>https://sicks3c.github.io/posts/how-i-scored-1k-bounty-using-waybackurls/</link><pubDate>Tue, 03 Aug 2021 07:32:53 +0800</pubDate><guid>https://sicks3c.github.io/posts/how-i-scored-1k-bounty-using-waybackurls/</guid><description>Hello Security Researchers
In this write-up, I want to share with you a finding that I discovered in a public bug bounty program that ended up paying me 1K just using a single command on the terminal
I won‚Äôt be able to disclose the name of the program since the leak was huge and they are still merging all the previous algorithm they used before to a new one and the deprecated API is still reachable</description><content>&lt;p>&lt;strong>Hello Security Researchers&lt;/strong>&lt;/p>
&lt;p>In this write-up, I want to share with you a finding that I discovered in a public bug bounty program that ended up paying me 1K just using a single command on the terminal&lt;/p>
&lt;p>I won‚Äôt be able to disclose the name of the program since the leak was huge and they are still merging all the previous algorithm they used before to a new one and the deprecated API is still reachable&lt;/p>
&lt;p>The program exist in &lt;strong>Hackerone&lt;/strong> in more than a decade with big names on them, I was familiar with the services they offer since I was a user so I started to enumerate subdomain where I noticed a weird link that may actually hold sensitive data since they are parsing everything in URL path so my first approach was checking the &lt;a href="https://github.com/tomnomnom/waybackurls">waybackurls&lt;/a> since &lt;a href="https://x.com/TomNomNom">Tomnomnom&lt;/a>&lt;/p>
&lt;p>has a very unique tools I used it as follows&lt;/p>
&lt;p>&lt;code>waybackurls requests.redacted.com&lt;/code>&lt;/p>
&lt;p>I was surprise with the amount of URLS that belongs to users with the tokens and I was like no way they‚Äôre valid right ?!&lt;/p>
&lt;p>&lt;img src="https://europe1.discourse-cdn.com/flex005/uploads/ewelinkforum/original/2X/2/26f9b6464e5ae5981f1c2c02375c3f264e2b94ad.gif" alt="gif">&lt;/p>
&lt;p>Guess I was wrong, I went to the API page and it looks like a simple POST request with the link leaked and a simple data via curl can do the Proof Of Concept using something like this&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wfnBQlHJQu79hgOFYi_jyA.png" alt="poc">&lt;/p>
&lt;p>I tested in my own env and sent the report right away, It got paid under few days and the team started the fix&lt;/p>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:960/format:webp/1*JkJJxM8lYzpGWDgxsvER3w.png" alt="poc2">&lt;/p>
&lt;h3 id="takeways">Takeways&lt;/h3>
&lt;ul>
&lt;li>Never say that this program has a lot of know hackers and I won‚Äôt find a thing&lt;/li>
&lt;li>everyone has it‚Äôs unique approach to a target and you may see something that other didn‚Äôt&lt;/li>
&lt;/ul></content></item><item><title>Tale of XSS in Angular</title><link>https://sicks3c.github.io/posts/tale-of-xss-in-angular/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://sicks3c.github.io/posts/tale-of-xss-in-angular/</guid><description>
Hello Security Researchers and Hackers
In this writeup I explain how I found 2 rXSS vulnerabilities in Angular using automation.
Tools Used Findomain for subdomain monitoring Wappalyzer for technology detection Discovery Process Received Telegram alert for new subdomains
Identified Angular 1.6 using Wappalyzer
Found reflected error parameter:
https://redacted.com/Home/Error?error=USER_NOT_AUTHORIZED
Exploitation Used payload from PayloadsAllTheThings:
Key Takeaways Demonstrate concrete impact for better severity rating Automate monitoring for fresh targets Know framework-specific vulnerabilities</description><content>&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/0*67LG7dce-XrL1Pdk" alt="Angular XSS Featured Image">&lt;/p>
&lt;p>&lt;strong>Hello Security Researchers and Hackers&lt;/strong>&lt;/p>
&lt;p>In this writeup I explain how I found 2 rXSS vulnerabilities in Angular using automation.&lt;/p>
&lt;hr>
&lt;h2 id="tools-used">Tools Used&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://findomain.app/">Findomain&lt;/a> for subdomain monitoring&lt;/li>
&lt;li>Wappalyzer for technology detection&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="discovery-process">Discovery Process&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Received Telegram alert for new subdomains&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Identified Angular 1.6 using Wappalyzer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Found reflected error parameter:&lt;/p>
&lt;p>&lt;code>https://redacted.com/Home/Error?error=USER_NOT_AUTHORIZED&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;p>Used payload from &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings">PayloadsAllTheThings&lt;/a>:&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*cj_dJMkwSfiThMOIRyOMMA.png" alt="XSS Execution Proof">&lt;/p>
&lt;hr>
&lt;h2 id="key-takeaways">Key Takeaways&lt;/h2>
&lt;ul>
&lt;li>Demonstrate concrete impact for better severity rating&lt;/li>
&lt;li>Automate monitoring for fresh targets&lt;/li>
&lt;li>Know framework-specific vulnerabilities&lt;/li>
&lt;/ul></content></item></channel></rss>